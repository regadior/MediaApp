openapi: 3.0.3
info:
  title: Swagger Book Swap - OpenAPI 3.0
  description: >-
    BookSwapHub is an online platform that unites book enthusiasts for
    exchanging physical or digital books. With an engaging interface, it
    encourages reading and collaboration through book searches, swap requests,
    and a community space for sharing insights and reviews. BookSwapHub turns
    discovering your next favorite read into a social adventure.
  version: 1.0.0
  x-app-version: 1.0.0
servers:
  - url: http://localhost:8080/
tags:
  - name: Authentication
    description: Login and register users
  - name: User
    description: User management
  - name: Book
    description: Book management
  - name: Swap
    description: Swap management
paths:
  /api/register:
    post:
      tags:
        - Authentication
      summary: User register
      description: Endpoint to perform a user register
      operationId: register
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /api/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Endpoint to perform a user login
      operationId: login
      requestBody:
        description: Credentials to login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserSuccessfullyLogged'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /api/users:
    get:
      security:
        - BearerAuth: []
      summary: Get a user by query
      tags:
        - User
      parameters:
        - in: query
          name: username
          description: Username of the user to get
          schema:
            type: string
      responses:
        '200':
          description: Returns the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - sessionToken incorrecta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User or book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /api/users/{userId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Obtain user by Id
      description: Endpoint to obtain a user by Id
      operationId: getUsersById
      parameters:
        - name: userId
          in: path
          description: Id of user to return
          required: true
          schema:
            type: integer
            format: int64
            example: 1346984104
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
    put:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Update a user by Id
      description: Endpoint to update a user by Id
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          description: Id of user to update
          required: true
          schema:
            type: integer
            format: int64
            example: 1346984104
      requestBody:
        description: User updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
    patch:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Update a user by Id
      description: Endpoint to make a partial update of the user by Id
      operationId: partialUpdateUserById
      parameters:
        - name: userId
          in: path
          description: Id of user to update
          required: true
          schema:
            type: integer
            format: int64
            example: 1346984104
      requestBody:
        description: User updated
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchOperation'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
    delete:
      security:
        - BearerAuth: []
      tags:
        - User
      summary: Delete a user bu Id
      description: Endpoint to delete a user by id
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: Id of user to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 1346984104
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /api/users/{userId}/books:
    post:
      security:
        - BearerAuth: []
      summary: Create a new book
      tags:
        - Book
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user to get
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
    get:
      security:
        - BearerAuth: []
      summary: Get all the books of a user
      tags:
        - Book
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Returns a list of books from the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /api/users/{userId}/books/{bookId}:
    get:
      security:
        - BearerAuth: []
      summary: Get a book from a user
      tags:
        - Book
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user
          required: true
          schema:
            type: integer
        - in: path
          name: bookId
          description: ID of the book to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Returns the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized - sessionToken incorrecta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User or book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
    put:
      security:
        - BearerAuth: []
      summary: Update a book for a user
      tags:
        - Book
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user
          required: true
          schema:
            type: integer
        - in: path
          name: bookId
          description: ID of the book to get
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: Book updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User or book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
    patch:
      security:
        - BearerAuth: []
      summary: Update a book field for a User
      tags:
        - Book
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user who owns the book
          required: true
          schema:
            type: integer
        - in: path
          name: bookId
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: Book updated
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchOperation'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User or book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
    delete:
      security:
        - BearerAuth: []
      summary: Delete a book from a user
      tags:
        - Book
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user who owns the book
          required: true
          schema:
            type: integer
        - in: path
          name: bookId
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - sessionToken incorrecta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User or book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /api/books:
    get:
      security:
        - BearerAuth: []
      summary: Get a book by querys
      tags:
        - Book
      parameters:
        - in: query
          name: tittle
          description: Tittle of the book to get
          schema:
            type: string
        - in: query
          name: author
          description: Author of the book to get
          schema:
            type: string
        - in: query
          name: isbn
          description: Isbn of the book to get
          schema:
            type: string
        - in: query
          name: editorial
          description: Editorial of the book to get
          schema:
            type: string
      responses:
        '200':
          description: Returns the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseFilter'
        '401':
          description: Unauthorized - sessionToken incorrecta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User or book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /users/{userOriginId}/swaps:
    post:
      security:
        - BearerAuth: []
      summary: Create a Swap
      tags:
        - Swap
      parameters:
        - in: path
          name: userOriginId
          description: Numeric ID of the user to get
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwapPost'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swap'
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /users/{userId}/swaps:        
    get:
      security:
        - BearerAuth: []
      summary: Get all Swap for a user
      tags:
        - Swap
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Swap'
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /users/{userId}/swaps/{swapId}:
    get:
      security:
        - BearerAuth: []
      summary: Get all Swap for a user
      tags:
        - Swap
      parameters:
        - in: path
          name: userId
          description: Numeric ID of the user to get
          required: true
          schema:
            type: integer
        - in: path
          name: swapId
          description: Numeric ID of the swap to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swap'
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User ID or Swap ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /users/{userTargetId}/swaps/{swapId}:
    patch:
      security:
        - BearerAuth: []
      summary: Change the state of the swap
      tags:
        - Swap
      parameters:
        - in: path
          name: userTargetId
          description: Numeric ID of the user(acept)
          required: true
          schema:
            type: integer
        - in: path
          name: swapId
          description: Numeric ID of the swap to acept
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request - Missing or incorrect parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '401':
          description: Unauthorized - Invalid sessionToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: NotFound - User ID or Swap ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
components:
  schemas:
    UserSuccessfullyLogged:
      type: object
      properties:
        Authorization:
          type: string
    UserRegister:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        surnames:
          type: string
        email:
          type: string
          format: email
        password:
          type: integer
        birthdate:
          type: string
          format: date
        description:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        surnames:
          type: string
        email:
          type: string
          format: email
        birthdate:
          type: string
          format: date
        signUpDate:
          type: string
          format: date

        description:
          type: string
    Credentials:
      type: object
      properties:
        username:
          type: string
          example: prueba1
        password:
          type: string
          example: 1234567
    PatchOperation:
      type: object
      properties:
        op:
          type: string
          example: replace
        path:
          type: string
          example: /target
        value:
          type: string
          example: aswd
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        editorial:
          type: string
        isbn:
          type: integer
    BookResponseFilter:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        editorial:
          type: string
        isbn:
          type: integer
        userId:
          type: integer
    Swap:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userOrigin: 
            $ref: '#/components/schemas/User'
        userTarget:
            $ref: '#/components/schemas/User'
        booksOrigin:
            type: array
            items:
              $ref: '#/components/schemas/Book'
        booksTarget:
            type: array
            items:
              $ref: '#/components/schemas/Book'
        state:
          type: string
          enum:
            - pending
            - accepted
            - rejected
          description: The state of the swap request (pending, accepted, or rejected)
    SwapPost:
      type: object
      properties:
        userTargetId:
          type: integer
          format: int64
        booksOriginId:
            type: array
            items: 
              type: integer
        booksTargetId:
            type: array
            items: 
              type: integer
    ExceptionResponse:
      type: object
      properties:
        status:
          type: integer
          default: 418
          multipleOf: 1
          enum:
            - 202
            - 502
            - 400
            - 409
            - 100
            - 201
            - 417
            - 424
            - 403
            - 504
            - 410
            - 505
            - 418
            - 419
            - 507
            - 500
            - 411
            - 423
            - 420
            - 405
            - 301
            - 302
            - 207
            - 300
            - 511
            - 204
            - 203
            - 406
            - 404
            - 501
            - 304
            - 200
            - 206
            - 402
            - 308
            - 412
            - 428
            - 102
            - 407
            - 431
            - 408
            - 413
            - 414
            - 416
            - 205
            - 303
            - 503
            - 101
            - 307
            - 429
            - 401
            - 451
            - 422
            - 415
            - 305
            - 421
        code:
          type: string
          default: im_a_teapot
        message:
          type: string
          default: I'm a teapot
        appVersion:
          type: string
          default: 1.0.0
  securitySchemes:
    BearerAuth:
      description: >-
        A valid Access Token is required to access protected resources. To
        obtain one, simply authenticate to the API through the authentication
        endpoint. If the authentication is successful, an Access Token and a
        Refresh Token will be returned. 

          Sample username and password to use on ```/api/login``` endpoint: ```prueba1``` / ```1234567```
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
